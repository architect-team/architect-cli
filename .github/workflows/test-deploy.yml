name: Test superset deployment

on:
  push:
    branches:
      - superset-updates # TODO: update

jobs:
  test_local:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
      # - run: apt update && apt install nodejs-current git curl jq # TODO: name steps, check if these are needed for gh
      - run: npm install -g @architect-io/cli
      - run: architect --version
      - run: architect config:set registry_host registry.dev.architect.io
      - run: architect config:set api_host https://api.dev.architect.io
      - run: architect config:set log_level debug
      - run: architect login -e ${{ secrets.ARCHITECT_EMAIL }} -p ${{ secrets.ARCHITECT_PASSWORD }}
      - run: git clone -b superset-updates https://github.com/architect-team/architect-cli.git # TODO: update branch
      - run: docker volume create volume-key
      - run: architect link examples/hello-world/architect.yml
      - run: architect dev -e superset architect-cli/test/mocks/superset/architect.yml --browser=false -s param_unset=test -d
      - run: sleep 60
      - run: docker ps -a
      # - run: ENV_NAME=$(architect dev:list --format=json | jq 'keys[0]' | tr -d '"')
      # - run: architect dev:list --format=json | jq 'keys[0]' | tr -d '"'
      # - run: architect dev:list
      # - run: echo $ENV_NAME
      - run: architect exec -e superset superset.services.stateless-app -- sh -c "curl -S -I https://hello.localhost.architect.sh:443/"

  # test_remote:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: '16'
  #         cache: 'npm'
  #     - run: npm install -g @architect-io/cli
  #     - run: architect --version
  #     - run: architect config:set registry_host registry.dev.architect.io
  #     - run: architect config:set api_host https://api.dev.architect.io
  #     - run: architect config:set log_level debug
  #     - run: architect login -e ${{ secrets.ARCHITECT_EMAIL }} -p ${{ secrets.ARCHITECT_PASSWORD }}
  #     - run: git clone -b superset-updates https://github.com/architect-team/architect-cli.git # TODO: update branch
  #     - run: architect register -a architect-ci examples/hello-world/architect.yml # TODO: update account and environment names here
  #     - run: architect deploy -a architect-ci --auto-approve -e example-environment architect-cli/test/mocks/superset/architect.yml -s param_unset=test # TODO: deploy when we merge to rc
  #     # TODO: architect exec to hello-world instance and attempt to git a container it shouldn't be able to access, ex stateless-app
  #     - run: sleep 180
  #     - run: curl --insecure --fail -S -I https://hello.example-environment.architect-ci.dev.arcitect.io/ || exit 1
  #     - run: export CERT_DATA=$(openssl s_client -showcerts -connect example-environment.architect-ci.dev.arcitect.io:443 </dev/null | openssl x509 -noout -issuer) # TODO: update app domain
  #     - run: if [[ "$CERT_DATA" = "issuer=C = US, O = Let's Encrypt, CN = R3" || "$CERT_DATA" = "issuer=C = US, O = (STAGING) Let's Encrypt, CN = (STAGING) Artificial Apricot R3" ]]; then echo "Valid cert generated"; else exit 1; fi
  #     # TODO: deploy to a different environment based on the branch name or something?
