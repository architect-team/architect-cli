version: '3.2'

services:
  elasticsearch:
    build:
      context: elasticsearch/
      args:
        - ELK_VERSION=$ELK_VERSION
        - INT_ARG=1
        - BOOL_ARG=true
        - EMPTY_ARG
        - EMPTY_ARG2=
        -
      dockerfile: Dockerfile.elasticsearch
      target: production
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      DISCOVERY_TYPE: single-node
      TEST_NUMBER: 3000
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P example_123 -Q 'SELECT 1'"]
      interval: 10s
      retries: 10
      start_period: 10s
      timeout: 3s
    networks:
      - elk
    expose:
      - 5432

  logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
        INT_ARG: 1
        BOOL_ARG: true
        EMPTY_ARG:
      target: build
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      - elasticsearch
    command: npm run start
    entrypoint: entrypoint.sh
    external_links:
      - kibana
    container_name: logstash-service
    deploy:
     resources:
       limits:
         memory: 1.5G
         cpus: 0.25
    labels:
      ENABLE: 'true'
      RULE: test
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "--silent"]
      interval: 3s
      retries: 5
      start_period: 30s

  kibana:
    image: docker.elastic.co/kibana/kibana:7.8.0
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
      - /var/lib/mysql
      - /opt/data:/var/lib/mysql
      - ./cache:/tmp/cache
      - ~/configs:/etc/configs/:ro
    ports:
      - "5601:5601"
      - "5000:5000/udp"
      - 127.0.0.1:8001:8001
      - 3000
      - 4000-4005
      - 12400-12500:1240
      - 9090-9091:8080-8081
      - 127.0.0.1:5000-5010:5000-5010
      - protocol: tcp
        target: 4444
      - protocol: udp
        target: 4445
    networks:
      - elk
    depends_on:
      elasticsearch:
        condition: service_started
    environment:
      - DB_TYPE=postgres
      - DB_HOST # warning, invalid
      - DB_NAME=gitea
      - DB_USER=gitea
      - DB_PASSWD=gitea
    labels:
      - "enable=true"
      - "rule=test"
      - "rule.invalid&key=test"
      - "invalid-rule=Path(`/`)"
      - 'key_only'
    healthcheck:
      test: 'curl google.com'

  db:
    image: "postgres:${POSTGRES_VERSION}"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}

networks:
  elk:
    driver: bridge

volumes:
  elasticsearch:
