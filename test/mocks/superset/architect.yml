name: superset
description: A spec with every field
keywords:
  - architect
  - spec
author: Architect.io
homepage: https://architect.io

secrets:
  param_string: architect
  param_number: 3000
  param_boolean: true
  param_required:
    required: true
    description: Root password to assign to the component's DB
    default: secret
  param_optional:
    required: false
    description: Name of the DB the component will store content in
    default: stateful
  param_default_undefined:
    required: false
    description: Default undefined
    default:
  param_default_boolean:
    required: false
    default: true
  param_unset:

services:
  api-db:
    description: api-db service description
    image: postgres:12
    command: 'postgres'
    entrypoint:
      - 'echo'
      - 'hello'
    language: postgresql
    environment:
      POSTGRES_USER: ${{ secrets.param_string }}
      POSTGRES_PASSWORD: ${{ secrets.param_required }}
      POSTGRES_DB: ${{ secrets.param_optional }}
      ENVIRONMENT_UNSET:
    volumes:
      volume-string: ./some-volume
      volume-object:
        mount_path: ./mount-path
        key: volume-key
        description: Volume description
        readonly: false
    build:
      context: .
      dockerfile: Dockerfile
      args:
        build_arg_string: arg_value
        build_arg_unset:
    cpu: 2
    memory: 4GB
    depends_on:
      - stateful-api
    labels:
      label-string: some_label
    interfaces:
      postgres:
        port: 5432
        protocol: postgresql
    liveness_probe:
      success_threshold: 3
      failure_threshold: 3
      timeout: '12s'
      interval: '20s'
      initial_delay: '30s'
      path: /liveness
      port: 5432
    replicas: 2
    scaling:
      min_replicas: 1
      max_replicas: 3
      metrics:
        memory: 80
    ${{ if architect.environment == 'local' }}:
      description: api-db service debug
      image: postgres:12
      command: 'postgres'
      entrypoint:
        - 'echo'
        - 'hello'
      language: postgresql
      environment:
        POSTGRES_USER: ${{ secrets.param_string }}
        POSTGRES_PASSWORD: ${{ secrets.param_required }}
        POSTGRES_DB: ${{ secrets.param_optional }}
        ENVIRONMENT_UNSET:
      volumes:
        volume-string: ./some-volume
        volume-object:
          mount_path: ./mount-path
          key: volume-key
          description: Volume description
          readonly: false
        another-volume-object:
          mount_path: ./mount-path
          host_path: ./test
          description: Volume description
          readonly: false
      build:
        dockerfile: ./Dockerfile
        args:
          build_arg_string: arg_value
          build_arg_unset:
      cpu: 2
      memory: 4GB
      depends_on:
        - stateful-api
      labels:
        label-string: some_label
      interfaces:
        postgres:
          port: 5432
          protocol: postgresql
      liveness_probe:
        success_threshold: 3
        failure_threshold: 3
        timeout: '12s'
        interval: '20s'
        initial_delay: '30s'
        path: /status
        port: 5432
      replicas: 2
      scaling:
        min_replicas: 1
        max_replicas: 3
        metrics:
          cpu: 80

  stateful-api:
    build:
      context: ./backend
      target: production
      ${{ if architect.environment == 'local' }}:
        target: dev
    interfaces:
      http: 8080
    environment:
      DB_ADDR: ${{ services.api-db.interfaces.postgres.url }}/${{ secrets.param_optional }}
      DB_USER: ${{ secrets.param_string }}
      DB_PASS: ${{ secrets.param_required }}
  frontend:
    build:
      context: ./frontend
    interfaces:
      web: 8081
    environment:
      API_ADDR: ${{ services.stateful-api.interfaces.http.url }}
    ${{ if architect.environment == 'local' }}:
      build:
        args:
          NODE_ENV: development
  ${{ if architect.environment == 'local' }}:
    local-cli:
      build:
        context: ./frontend
      interfaces:
        web: 8081
      environment:
        API_ADDR: ${{ services.stateful-api.interfaces.http.url }}
  stateless-api:
    image: heroku/nodejs-hello-world
    interfaces:
      main: ${{ secrets.param_number }}
    environment:
      FILE_DATA: file:./filedata.txt

tasks:
  curler:
    schedule: '*/5 * * * ?'
    image: ellerbrock/alpine-bash-curl-ssl
    command:
      - sh
      - -c
      - $RUN_CURL && $SERVER_URL

    environment:
      SERVER_URL: ${{ services.stateless-api.interfaces.main.url }}
      RUN_CURL: ${{ secrets.param_boolean }}

  curler-build:
    schedule: '*/5 * * * ?'
    build:
      context: ./task
    command:
      - sh
      - -c
      - $RUN_CURL && $SERVER_URL
    environment:
      SERVER_URL: ${{ services.stateless-api.interfaces.main.url }}
      RUN_CURL: ${{ secrets.param_boolean }}
  ${{ if architect.environment == 'local' }}:
    local-task:
      build:
        context: ./frontend
      environment:
        API_ADDR: ${{ services.stateful-api.interfaces.http.url }}

dependencies:
  examples/hello-world: latest

interfaces:
  api: ${{ services.stateless-api.interfaces.main.url }}
  frontend:
    description: Exposes the sign in webapp to upstreams
    url: ${{ services.frontend.interfaces.web.url }}

artifact_image: some-image
