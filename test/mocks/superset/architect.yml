name: superset
description: A spec with every field
keywords:
  - architect
  - spec
author: Architect.io
homepage: https://architect.io

secrets:
  log_level:
    required: false
    default: debug
    description: |
      Applied as an environment variable to each service in the component
      (oneof: ['error', 'warning', 'debug', 'info', 'trace'])
  db_user:
    description: Root user to assign to the component's DB
    default: architect
  db_pass:
    description: Root password to assign to the component's DB
    default: secret
  db_name: stateful
  stateless_app_port: 8080
  # not required for the apps to run
  param_string: architect
  param_boolean: true
  param_required:
    required: true
    description: Root password to assign to the component's DB
    default: secret
  param_default_undefined:
    required: false
    description: Default undefined
    default:
  param_default_boolean:
    required: false
    default: true
  param_unset:

dependencies:
  hello-world: latest

services:
  stateless-app: # TODO: shove most of the debug block into this component?
    description: stateless app service description
    language: javascript
    build:
      context: ./stateless-app
      dockerfile: Dockerfile
    command: 'npm run start'
    interfaces:
      http: 8080 # TODO: try to set this to the secret - stateless_app_port - does this not work?
    environment:
      LOG_LEVEL: ${{ secrets.log_level }}
      HELLO_WORLD_ADDR: ${{ dependencies.hello-world.interfaces.hello.url }}
      ENVIRONMENT_UNSET:
      PARAM_STRING: ${{ secrets.param_string }}
      PARAM_REQUIRED: ${{ secrets.param_required }}
      PARAM_OPTIONAL: ${{ secrets.log_level }}
    cpu: 2
    memory: 4GB
    replicas: 2
    scaling:
      min_replicas: 1
      max_replicas: 3
      metrics:
        memory: 80
    depends_on:
      - api-db
    labels:
      label-string: some_label
  api-db:
    image: postgres:12
    language: postgresql
    interfaces:
      postgres:
        port: 5432
        protocol: postgresql
    environment:
      POSTGRES_USER: ${{ secrets.db_user }}
      POSTGRES_PASSWORD: ${{ secrets.db_pass }}
      POSTGRES_DB: ${{ secrets.db_name }}
  stateful-api:
    build:
      args:
        build_arg_string: arg_value
        build_arg_unset:
      target: production
      ${{ if architect.environment == 'local' }}:
        target: dev
      context: ./stateful-backend
      dockerfile: ./Dockerfile
    interfaces:
      http: 8080
    environment:
      DB_ADDR: ${{ services.api-db.interfaces.postgres.url }}/${{ secrets.db_name }}
      DB_USER: ${{ secrets.db_user }}
      DB_PASS: ${{ secrets.db_pass }}
      FILE_DATA: file:./filedata.txt
    liveness_probe:
      success_threshold: 3
      failure_threshold: 3
      timeout: '12s'
      interval: '20s'
      initial_delay: '30s'
      path: /sign-ins
      port: 8080
  stateful-frontend:
    build:
      context: ./stateful-frontend
    interfaces:
      web: 8081
    environment:
      API_ADDR: ${{ services.stateful-api.interfaces.http.url }}
    entrypoint:
      - npm
      - run
      - start
    # volumes:
    #   volume-string: ./some-volume # TODO: docker error locally - Error response from daemon: invalid mount config for type "volume": invalid mount path: 'some-volume' mount path must be absolute
    #   volume-object:
    #     mount_path: ./mount-path # TODO: Error response from daemon: invalid mount config for type "volume": invalid mount path: 'mount-path' mount path must be absolute
    #     # key: volume-key # TODO: keep or remove? What about mike's work, and this would be a pain for local testing
    #     description: Volume description
    #     readonly: false
    ${{ if architect.environment == 'local' }}:
      build:
        args:
          NODE_ENV: development
  ${{ if architect.environment == 'local' }}:
    local-cli:
      build:
        context: ./stateful-frontend
      interfaces:
        web: 8081
      environment:
        API_ADDR: ${{ services.stateful-api.interfaces.http.url }}

# TODO: tasks
tasks:
  curler:
    schedule: '*/5 * * * ?'
    image: ellerbrock/alpine-bash-curl-ssl
    command:
      - sh
      - -c
      - $RUN_CURL && $SERVER_URL

    environment:
      SERVER_URL: ${{ services.stateful-api.interfaces.http.url }}
      RUN_CURL: ${{ secrets.param_boolean }}
# TODO: debug block overrides on a service

interfaces:
  stateless:
    url: ${{ services.stateless-app.interfaces.http.url }}
    ingress: # TODO: other ingress properties
      enabled: true
      # TODO: ip_whitelist, path,
  stateful:
    description: Exposes the sign in webapp to upstreams
    url: ${{ services.stateful-frontend.interfaces.web.url }}
    ingress: # TODO: other ingress properties
      subdomain: stateful

artifact_image: architect-artifact-image
