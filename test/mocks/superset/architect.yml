name: superset
description: A spec with every field
keywords:
  - architect
  - spec
author: Architect.io
homepage: https://architect.io

secrets:
  log_level:
    required: false
    default: debug
    description: |
      Applied as an environment variable to each service in the component
      (oneof: ['error', 'warning', 'debug', 'info', 'trace'])
  db_user:
    description: Root user to assign to the component's DB
    default: architect
  db_pass:
    description: Root password to assign to the component's DB
    default: secret
  db_name: stateful
  stateless_app_port: 8080
  # not required for the apps to run
  param_string: architect
  param_boolean: true
  param_required:
    required: true
    description: Root password to assign to the component's DB
    default: secret
  param_default_undefined:
    required: false
    description: Default undefined
    default:
  param_default_boolean:
    required: false
    default: true
  param_unset:

dependencies:
  hello-world: latest
  deprecated-hello-world: latest

databases:
  api-db:
    type: postgres:12

services:
  stateless-app:
    description: stateless app service description
    language: javascript
    build:
      context: ../../../examples/stateless-component/
      dockerfile: Dockerfile
    command: 'npm run start'
    interfaces:
      http:
        port: 8080
        ingress:
          enabled: true
      unused:
        port: 8080
        ingress:
          ip_whitelist:
            - 0.0.0.0
          path: /api
    environment:
      LOG_LEVEL: ${{ secrets.log_level }}
      URL: ${{ services.stateless-app.interfaces.http.url }}
      EXT_URL: ${{ services.stateless-app.interfaces.http.ingress.url }}
      HELLO_WORLD_ADDR: ${{ dependencies.hello-world.services.api.interfaces.main.url }}
      EXT_HELLO_WORLD_ADDR: ${{ dependencies.hello-world.services.api.interfaces.main.ingress.url }}
      DEPRECATED_HELLO_WORLD_ADDR: ${{ dependencies.deprecated-hello-world.interfaces.hello.url }}
      DEPRECATED_EXT_HELLO_WORLD_ADDR: ${{ dependencies.deprecated-hello-world.ingresses.hello.url }}
      DEPRECATED_EXT_HELLO_WORLD_ADDR2: ${{ environment.ingresses.deprecated-hello-world.hello.url }} # Deprecated
      UNUSED_INGRESS_ADDR: ${{ services.stateless-app.interfaces.unused.ingress.url }}
      ENVIRONMENT_UNSET:
      PARAM_STRING: ${{ secrets.param_string }}
      PARAM_REQUIRED: ${{ secrets.param_required }}
      PARAM_OPTIONAL: ${{ secrets.log_level }}
    cpu: 1
    memory: 1GB
    replicas: 2
    scaling:
      min_replicas: 1
      max_replicas: 3
      metrics:
        memory: 80
    depends_on:
      - api-db
    labels:
      label-string: some_label
    liveness_probe:
      success_threshold: 1
      failure_threshold: 3
      timeout: '10s'
      interval: '10s'
      initial_delay: '5s'
      path: /
      port: 8080
    ${{ if architect.environment == 'local' }}:
      command: 'npm run start'

  api-db:
    image: postgres:12
    language: postgresql
    interfaces:
      postgres:
        port: 5432
        protocol: postgresql
    environment:
      POSTGRES_USER: ${{ secrets.db_user }}
      POSTGRES_PASSWORD: ${{ secrets.db_pass }}
      POSTGRES_DB: ${{ secrets.db_name }}
    ${{ if architect.environment == 'local' }}:
      description: api-db service debug
      image: postgres:12
      language: postgresql
      environment:
        POSTGRES_USER: ${{ secrets.db_user }}
        POSTGRES_PASSWORD: ${{ secrets.db_pass }}
        POSTGRES_DB: ${{ secrets.db_name }}
        ENVIRONMENT_UNSET:
      volumes:
        volume-string: /tmp/some-volume
        volume-debug:
          mount_path: /tmp/mount-path
          key: volume-key
          description: Volume description
          readonly: false
        another-volume-object:
          mount_path: /tmp/mount-path
          host_path: ./test
          description: Volume description
          readonly: false
      cpu: 1
      memory: 1GB
      interfaces:
        postgres:
          port: 5432
          protocol: postgresql

  stateful-api:
    reserved_name: stateful-reserved-name
    build:
      args:
        build_arg_string: arg_value
        build_arg_unset:
      # target: production # TODO: re-enable when we move the example app to the test directory
      # ${{ if architect.environment == 'local' }}:
      #   target: dev
      context: ../../../examples/stateful-component/backend/
      dockerfile: ./Dockerfile
    interfaces:
      http: 8080
    environment:
      BACKUP_DB_ADDR: ${{ databases.api-db.dsn }}
      DB_ADDR: ${{ services.api-db.interfaces.postgres.url }}/${{ secrets.db_name }}
      DB_USER: ${{ secrets.db_user }}
      DB_PASS: ${{ secrets.db_pass }}
      FILE_DATA: file:./filedata.txt
    liveness_probe:
      success_threshold: 1
      failure_threshold: 3
      timeout: '10s'
      interval: '10s'
      initial_delay: '5s'
      path: /
      port: 8080
    ${{ if architect.environment == 'local' }}:
      entrypoint:
        - npm
        - start
      liveness_probe:
        success_threshold: 3
        failure_threshold: 3
        timeout: '10s'
        interval: '20s'
        initial_delay: '30s'
        path: /
        port: 8080
      labels:
        label-string: some_label
      build:
        dockerfile: ./Dockerfile
        args:
          build_arg_string: arg_value
          build_arg_unset:
      replicas: 2

  stateful-frontend:
    build:
      context: ../../../examples/stateful-component/frontend/
    interfaces:
      web:
        port: 8081
        ingress:
          subdomain: stateful
    environment:
      API_ADDR: ${{ services.stateful-api.interfaces.http.url }}
    entrypoint:
      - npm
      - run
      - start
    ${{ if architect.environment == 'local' }}:
      build:
        args:
          NODE_ENV: development
      depends_on:
        - stateful-reserved-name
      scaling:
        min_replicas: 1
        max_replicas: 3
        metrics:
          cpu: 80

  ${{ if architect.environment == 'local' }}:
    local-cli:
      build:
        context: ../../../examples/stateful-component/frontend/
      interfaces:
        web: 8081
      environment:
        API_ADDR: ${{ services.stateful-api.interfaces.http.url }}

tasks:
  curler:
    schedule: '*/5 * * * ?'
    image: ellerbrock/alpine-bash-curl-ssl
    command:
      - sh
      - -c
      - $RUN_CURL && curl $SERVER_URL

    environment:
      SERVER_URL: ${{ services.stateless-app.interfaces.http.url }}
      RUN_CURL: ${{ secrets.param_boolean }}

  curler-build:
    schedule: '*/5 * * * ?'
    build:
      context: ../../../examples/scheduled-tasks/
    command:
      - sh
      - -c
      - $RUN_CURL && curl $SERVER_URL
    environment:
      SERVER_URL: ${{ services.stateless-app.interfaces.http.url }}
      RUN_CURL: ${{ secrets.param_boolean }}
  ${{ if architect.environment == 'local' }}:
    curler-build-local:
      build:
        context: ../../../examples/scheduled-tasks/
        dockerfile: ./Dockerfile
      command:
        - sh
        - -c
        - $RUN_CURL && curl $SERVER_URL
      environment:
        SERVER_URL: ${{ services.stateless-app.interfaces.http.url }}
        RUN_CURL: ${{ secrets.param_boolean }}

artifact_image: architect-artifact-image
