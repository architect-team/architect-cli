name: Architect Deployment

on:
  pull_request_target:
    branches:
      - master
    types:
      - closed

env:
  COMPONENT_TAG: latest
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

jobs:
  apply_terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: 1.1.3
          terraform_wrapper: false
      - name: Initialize terraform
        run: cd ./terraform && terraform init -backend-config="bucket=${{ secrets.REMOTE_STATE_BUCKET }}" -backend-config="region=${{ secrets.AWS_DEFAULT_REGION }}" -backend-config="key=${{ secrets.AWS_ACCESS_KEY_ID }}"
      - name: Terraform plan
        id: plan
        run: cd ./terraform && terraform plan -no-color -out tfplan -var prefix=${{ secrets.PREFIX }} -var postgres_user=${{ secrets.POSTGRES_USER }} -var postgres_password=${{ secrets.POSTGRES_PASSWORD }} -var postgres_database=${{ secrets.POSTGRES_DATABASE }}
      - name: Terraform apply
        id: apply
        run: cd ./terraform && terraform apply tfplan -no-color
      - name: Set postgres host
        id: set_postgres_host
        run: |
          cd ./terraform
          POSTGRES_HOST=$(terraform output -json | jq -r .postgres_host.value)
          echo "::set-output name=postgres_host::$POSTGRES_HOST"
    outputs:
      postgres_host: ${{ steps.set_postgres_host.outputs.postgres_host }}

# TODO:
# initial deployment will need:
# awscli installed
# kubeconfig from awscli for platform/environment creation - second job assumes that platform/env exist already
  deploy_component:
    runs-on: ubuntu-latest
    needs: [apply_terraform]
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up node 14
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Install Architect CLI
        run: sudo npm install -g @architect-io/cli
      - name: Login to Architect Cloud
        run: architect login -e ${{ secrets.ARCHITECT_EMAIL }} -p ${{ secrets.ARCHITECT_PASSWORD }}
      - name: Register component w/ Architect
        run: architect register ./architect.yml -t ${{ env.COMPONENT_TAG }}
      - name: Deploy component
        run: architect deploy --auto-approve -a ${{ secrets.ACCOUNT_NAME }} -e ${{ secrets.ENVIRONMENT_NAME }} ${{ secrets.ACCOUNT_NAME }}/react-app:${{ env.COMPONENT_TAG }} -p api_db_host=${{ needs.apply_terraform.outputs.postgres_host }} -p db_use_ssl=true -i app:app
