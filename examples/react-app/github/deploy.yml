name: Architect Deployment

on:
  pull_request_target:
    branches:
      - master
    types:
      - closed

env:
  COMPONENT_TAG: latest
  KUBECONFIG_NAME: eks-kubeconfig
  ARTIFACT_NAME: architect-artifact
  POSTGRES_HOST_FILENAME: postgres-host.txt
  KUBERNETES_CLUSTER_NAME: kubernetes-cluster-name.txt
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

jobs:
  terraform_setup:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: 1.1.3
          terraform_wrapper: false
      - name: Initialize terraform
        run: cd ./terraform && terraform init -backend-config="bucket=${{ secrets.REMOTE_STATE_BUCKET }}" -backend-config="region=${{ secrets.AWS_DEFAULT_REGION }}" -backend-config="key=${{ secrets.AWS_ACCESS_KEY_ID }}"
      - name: Terraform plan
        id: plan
        run: cd ./terraform && terraform plan -no-color -out tfplan -var prefix=${{ secrets.PREFIX }} -var postgres_user=${{ secrets.POSTGRES_USER }} -var postgres_password=${{ secrets.POSTGRES_PASSWORD }} -var postgres_database=${{ secrets.POSTGRES_DATABASE }}
      - name: Terraform apply
        id: apply
        run: cd ./terraform && terraform apply tfplan -no-color
      - name: Set terraform outputs
        id: set_terraform_outputs
        run: |
          cd ./terraform
          POSTGRES_HOST=$(terraform output -json | jq -r .postgres_host.value)
          echo $POSTGRES_HOST > ${{ env.POSTGRES_HOST_FILENAME }}
          KUBERNETES_CLUSTER_NAME=$(terraform output -json | jq -r .kubernetes_cluster_name.value)
          echo $KUBERNETES_CLUSTER_NAME > ${{ env.KUBERNETES_CLUSTER_NAME }}
      - name: Upload postgres host artifact
        uses: actions/upload-artifact@v2.3.1
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            ./terraform/${{ env.POSTGRES_HOST_FILENAME }}
            ./terraform/${{ env.KUBERNETES_CLUSTER_NAME }}
  architect_deploy:
    runs-on: ubuntu-latest
    needs: [terraform_setup]
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up node 14
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v2.0
      - uses: actions/download-artifact@v2
        with:
          name: ${{ env.ARTIFACT_NAME }}
      - name: Install Architect CLI
        run: sudo npm install -g @architect-io/cli
      - name: Login to Architect Cloud
        run: architect login -e ${{ secrets.ARCHITECT_EMAIL }} -p ${{ secrets.ARCHITECT_PASSWORD }}
      - name: Register component w/ Architect
        run: architect register ./architect.yml -t ${{ env.COMPONENT_TAG }}
      - name: Create kubeconfig for platform
        run: aws eks update-kubeconfig --name $(cat ${{ env.KUBERNETES_CLUSTER_NAME }}) --kubeconfig ${{ env.KUBECONFIG_NAME }}
      - name: Create Architect platform
        run: architect platform:create ${{ secrets.PLATFORM_NAME }} --type kubernetes -a ${{ secrets.ACCOUNT_NAME }} --kubeconfig ${{ env.KUBECONFIG_NAME }} --auto-approve || exit 0
      - name: Create Architect environment
        run: architect environment:create ${{ secrets.ENVIRONMENT_NAME }} --platform ${{ secrets.PLATFORM_NAME }} -a ${{ secrets.ACCOUNT_NAME }} || exit 0
      - name: Deploy component
        run: architect deploy --auto-approve -a ${{ secrets.ACCOUNT_NAME }} -e ${{ secrets.ENVIRONMENT_NAME }} ${{ secrets.ACCOUNT_NAME }}/react-app:${{ env.COMPONENT_TAG }} -p api_db_host=$(cat ${{ env.POSTGRES_HOST_FILENAME }}) -p db_use_ssl=true -i app:app
