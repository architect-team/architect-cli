name: Architect Deployment

on:
  pull_request_target:
    branches:
      - main
    types:
      - closed

env:
  COMPONENT_TAG: latest
  KUBECONFIG_NAME: eks-kubeconfig
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: us-east-2
  PLATFORM_NAME: aws-eks
  ENVIRONMENT_NAME: aws-eks
  ARCHITECT_ACCOUNT: examples

jobs:
  terraform_setup:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: 1.1.3
          terraform_wrapper: false
      - name: Initialize terraform
        run: terraform init -backend-config="bucket=react-app-tfstate" -backend-config="key=state"
      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -out tfplan -var prefix=react-app -var postgres_user=${{ secrets.POSTGRES_USER }} -var postgres_password=${{ secrets.POSTGRES_PASSWORD }} -var postgres_database=${{ secrets.POSTGRES_DATABASE }}
      - name: Terraform apply
        id: apply
        run: terraform apply tfplan -no-color
      - name: Set terraform outputs
        id: set_terraform_outputs
        run: |
          AURORA_HOST=$(terraform output -json | jq -r .aurora_host.value)
          echo "::set-output name=aurora_host::$AURORA_HOST"
          KUBERNETES_CLUSTER_NAME=$(terraform output -json | jq -r .kubernetes_cluster_name.value)
          echo "::set-output name=kubernetes_cluster_name::$KUBERNETES_CLUSTER_NAME"
    outputs:
      aurora_host: ${{ steps.set_terraform_outputs.outputs.aurora_host }}
      kubernetes_cluster_name: ${{ steps.set_terraform_outputs.outputs.kubernetes_cluster_name }}
  architect_deploy:
    runs-on: ubuntu-latest
    needs: [terraform_setup]
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up node 14
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v2.0
      - name: Install Architect CLI
        run: sudo npm install -g @architect-io/cli
      - name: Login to Architect Cloud
        run: architect login -e ${{ secrets.ARCHITECT_EMAIL }} -p ${{ secrets.ARCHITECT_PASSWORD }}
      - name: Register component w/ Architect
        run: architect register ./architect.yml -t ${{ env.COMPONENT_TAG }}
      - name: Create kubeconfig for platform
        run: aws eks update-kubeconfig --name ${{ needs.terraform_setup.outputs.kubernetes_cluster_name }} --kubeconfig ${{ env.KUBECONFIG_NAME }}
      - name: Create Architect platform
        run: architect platform:create ${{ env.PLATFORM_NAME }} --type kubernetes --kubeconfig ${{ env.KUBECONFIG_NAME }} --auto-approve || echo "Platform ${{ env.PLATFORM_NAME }} is already created. Skipping..."
      - name: Create Architect environment
        run: architect environment:create ${{ env.ENVIRONMENT_NAME }} --platform ${{ env.PLATFORM_NAME }}  || echo "Platform ${{ env.ENVIRONMENT_NAME }} is already created. Skipping..."
      - name: Deploy component
        run: architect deploy --auto-approve -e ${{ env.ENVIRONMENT_NAME }} ${{ env.ARCHITECT_ACCOUNT }}/react-app:${{ env.COMPONENT_TAG }} -p api_db_host=${{ needs.terraform_setup.outputs.aurora_host }} -p db_use_ssl=true -p api_db_name=${{ secrets.POSTGRES_DATABASE }} -p root_db_user=${{ secrets.POSTGRES_USER }} -p root_db_pass=${{ secrets.POSTGRES_PASSWORD }}
